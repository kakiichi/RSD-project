from pylab import *
from scipy.interpolate import interp2d

def tau_eff_B13(z):
    # Becker+13 formula
    tau_eff_B13=0.751*((1.+z)/4.5)**2.90 - 0.132
    return tau_eff_B13

# load Adelberger+05
A05=genfromtxt('A05.dat',comments='#')
F_05=0.765

# load VLRS data
VLRS=genfromtxt('VLRS.dat',comments='#')


# read from files
nfiles=3
title=range(nfiles)
title[0]='REF'
title[1]='HIGH DENS'
title[2]='LOW DENS'


fig=plt.figure(figsize=(9,4))
plt.subplots_adjust(wspace=0.4,left=0.12, right=0.96, top=0.95, bottom=0.2)

plt.rc('font',**{'family':'serif', 'size':22})
plt.rc('xtick', labelsize=20)
plt.rc('ytick', labelsize=20)
plt.rc('legend', fontsize=23)

for n in range(nfiles):
    if n==0: 
        s_para,s_perp,tau_eff=genfromtxt('RSD_01.dat',usecols=(4,5,6),unpack=True,comments='#')
    if n==1: 
        s_para,s_perp,tau_eff=genfromtxt('RSD_02.dat',usecols=(4,5,6),unpack=True,comments='#')
    if n==2:
        s_para,s_perp,tau_eff=genfromtxt('RSD_03.dat',usecols=(4,5,6),unpack=True,comments='#')

    N=100

    F=exp(-tau_eff).reshape(N,N) # F[s_para,s_perp]

    def find_nearest(array,value):
        idx = (abs(array-value)).argmin()
        return array[idx],idx

    def Legendre(x,l):
        if l == 0:
            Legendre=1.
        elif l == 2:
            Legendre=1./2.*(3.*x*x-1.)
        elif l == 4:
            Legendre=1./8.*(35.*x**4-30.*x**2+3.)
        else:
            print 'no Legendre moment implemented yet'
        return Legendre

        Ng=500
        mu,dmu=linspace(0,1,Ng,retstep=True)

        xi_moment=0.
        for i in range(Ng):
            s_para_i=s*mu[i]    
            s_perp_i=s*sqrt(1.-mu[i]**2)
            s_para_idx=find_nearest(s_para_grid,s_para_i)[1]
            s_perp_idx=find_nearest(s_perp_grid,s_perp_i)[1]
            xi_moment+=F[s_para_idx,s_perp_idx]*Legendre(mu[i],l)*dmu
            xi_moment=(2.*l+1.)/2. * (xi_moment * 2.) 
            # x2 because we only integrated over the first quandrant mu=(0,1) 

        return xi_moment

    # main
    Nbins=30
    s_min=0.01 # pMpc
    s_max=3.0  # pMpc
    s=linspace(s_min,s_max,Nbins)

    xi_0=zeros(Nbins)
    xi_2=zeros(Nbins)
    xi_4=zeros(Nbins)
    for i in range(Nbins):
        xi_0[i]=xi_moment(s[i],0)
        xi_2[i]=xi_moment(s[i],2)
        xi_4[i]=xi_moment(s[i],4)

    # plot
    subplot(1,2,1)
    ylabel('$\\langle F_\\alpha(s)\\rangle_0$',fontsize=22)
    xlabel('$s$ $[\\rm pMpc]$',fontsize=22)
    if n==0:
        errorbar(VLRS[:,0]/(1.+3.)/0.7,VLRS[:,1],yerr=VLRS[:,2]-VLRS[:,1],fmt='o',color='black',label='VLRS+KBSS')
        hlines(exp(-tau_eff_B13(3.0)),0,s_max,linestyles='dotted')
    if n==0: 
        plot(s,xi_0,'k-', linewidth=2,label=title[n])
    if n==1: 
        plot(s,xi_0,'r--', linewidth=2,label=title[n])
    if n==2: 
        plot(s,xi_0,'b:', linewidth=2,label=title[n])
    xlim(0,s_max)
    ylim(0,0.8)
    lg=plt.legend(loc='lower right',fontsize=14)
    lg.draw_frame(False)

    subplot(1,2,2)
    ylabel('$\\langle F_\\alpha(s)\\rangle_2/\\langle F_\\alpha(s)\\rangle_0$',fontsize=22)
    xlabel('$s$ $[\\rm pMpc]$',fontsize=22)
    if n==0: 
        plot(s[1:],xi_2[1:]/xi_0[1:],'k-', linewidth=2,label=title[n])
    if n==1: 
        plot(s[1:],xi_2[1:]/xi_0[1:],'r--', linewidth=2,label=title[n])
    if n==2: 
        plot(s[1:],xi_2[1:]/xi_0[1:],'b:', linewidth=2,label=title[n])
    ylim(-0.55,0.15)
    xlim(0,3)
    hlines(0,0,s_max,linestyles='dotted')
    lg=plt.legend(loc='lower right',fontsize=14)
    lg.draw_frame(False)
#plt.tight_layout()
